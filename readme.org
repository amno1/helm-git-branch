* Helm-git-branch

  Fast git branch switcher for times when you need to quickly switch between two
  branches.

* About

  Small Emacs Helm application to switch between two branches.

  Imagine if you work on a bigger feature, but need to switch to another branch
  to fix or lookup something. Usual workflow is to either stash changes, switch
  to another branch, and upon switching back reaply changes. Alternatively to
  commit changes, switch, and than when switched back, to reset HEAD^. Currently
  this little branch switcher implements only stashing strategy. I had plans to
  implement the commit strategy too, along some other actions like delete
  branches, pull/merge remote branches and few other small utilities, but it is
  just to realize that I don't have time to work on this. Currently it does what
  was my primary goal, the rest will be left for some other times, or as an
  exercise to an interested reader.

* Requirements

  This builds heavily on [[https://github.com/emacs-helm/helm-ls-git][helm-ls-git]], so you will have to install it first. Also
  you will need latest Emacs 28.0.50 from the master, and that of late night of
  14th August. That since [[https://debbugs.gnu.org/cgi/bugreport.cgi?bug=49980;msg=42][Juri Linkow was nice and implemented a feature to
  save all buffers belonging to a project]] (git root in this case), which I use
  here. That might be a show stopper for some unfortunately. Maybe I will code
  something else myself one day, but I guess it is another one on the never ending
  wish-list.

* Installation

  Install this file somewhere in your Emacs load-path and load it.

* Usage

  There is only one command: /helm-git-branch-local-branches/.
  
  Either call it via M-x or bind it to a key.

  Local branches will be shown in usual Helm completion buffer. The current
  branch will have a '*' and it will be color coded: green if everything is
  clean and commited, red if there are some changes to commit. Color code is
  just a visual reminder, that there will be some stashed data. It means nothing
  more than so. It works only for saved changes, and also seems to show false
  color when there really are no changes sometimes, I think because of some
  temporary files that Emacs creates. Maybe a rule in .gitignore can fix it.

  If there are open buffers with unsaved changes, all changes will be saved
  prior to stashing. This can be turned off by setting
  /helm-git-branch-auto-save-on-change/ to nil. Observe that you might loose
  unsaved changes if this is nil. 

  Be default, everything is stashed, tracked and untracked data, but not
  ignored files. Stashing untracked files might not always be desirable, so the
  behaviour so that can also be changed by setting the variable
  /helm-git-branch-stash-unstaged/ to nil.

* Caveats

  Use case for this is to be able to quickly switch between branches, when you
  know you are comming back again to same branch. Easy way to mess things up
  would be to use this to switch between multiple branches and than switching
  back in "wrong" reversed order. I haven't tested myself, but I believe that is
  a good way to mess it up :-).

  Another way would be to use this in combination with command line or some
  other tools. For  example switch with this, and then modify files elsewhere,
  form some other editor, or command line etc, and than switch back again with
  this tool. This saves stash with a certain name, which is than used to search
  and apply that stash back again. It won't check again to see if everything is
  aligning, all checksums with blue Moon and Jupiter; it will just apply the
  sved stash. Of course you can manipulate stuff manually from command line, for
  example delete the stash, but if you feel need for that, you should know what
  you are doing. 
  
* Issues

  Probably many. Please let me know.
  
* Licence

  Copyright (C) 2020 Arthur Miller

  This program is free software; you can redistribute it and/or modify it under
  the terms of the GNU General Public License as published by the Free Software
  Foundation, either version 3 of the License, or (at your option) any later
  version.

  This program is distributed in the hope that it will be useful, but WITHOUT
  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
  details.

  You should have received a copy of the GNU General Public License along with
  this program. If not, see https://www.gnu.org/licenses/.
